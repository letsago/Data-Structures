1.1 — Structure of a Program

    Put main() function in a .cpp file named either main.cpp, or with the same name as your project. 
    For example, if you are writing a Chess game, you could put your main() function in chess.cpp. 
    Every program must have a main() function.

1.2 — Comments

    At the library, program, or function level, describe what
    Inside the library, program, or function, describe how
    At the statement level, describe why.

1.3 — A first look at variables, initialization, and assignment

    When giving variables an initial value, favor initialization over assignment.
    Make sure all of your variables have known values (either through initialization or assignment)
    Avoid undefined behavior.
    Recommended: Disable compiler extensions to ensure your programs (and coding practices) remain compliant with C++ standards and will work on any system.

1.4 — A first look at functions and return values

    main() function goes on bottom of program
    No nested functions, place all non-main functions above main()

1.4c — Keywords and naming identifiers
    
    For ambiguous identifiers, use comments to more thoroughly describe them

1.7 — Forward declarations and definitions

    When addressing compile errors in your programs, always resolve the first error produced first.

2.1 — Fundamental variable definition, initialization, and assignment

    Define variables as close to their first use as you reasonably can.

2.4a — Fixed-width integers and the unsigned controversy

    Using an unsigned instead of an int to gain one more bit to represent positive integers is almost never a good idea

3.4 — Sizeof, comma, and conditional operators
    
    Variables defined inside an if or else statement die at the end of the if or else statement
    Both expressions in a conditional statement must match

4.2a — Why global variables are evil
    
    “Avoid non-const global variables!”
    Declare local variables as close to where they are used as possible because it minimizes the amount of code you need to look through to understand what the variable does.
    Use local variables instead of global variables whenever reasonable, and pass them to the functions that need them.
    Prefix all your global variables with “g_”, and/or put them in a namespace, both to reduce the chance of naming collisions and raise awareness that a variable is global
    Encapsulation - make the global variable static, so it can only be accessed directly in the file it’s declared, then provide external global “access functions” to work with the variable, lastly when writing a standalone function that uses the global variable, don’t use the variable directly in your function body. Pass it in as a parameter, and use the parameter

4.3 — Static duration variables
    
    Static keyword makes global variables have internal linkeage, but makes local variables have static duration






